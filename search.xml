<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode 105. Construct Binary Tree from Preorder and Inorder Traversal</title>
      <link href="/2022/05/14/leetcode-top100-liked-105/"/>
      <url>/2022/05/14/leetcode-top100-liked-105/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/divide-and-conquer/">Divide and Conquer</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= preorder.length &lt;= 3000</li><li>  inorder.length == preorder.length</li><li>  -3000 &lt;= preorder[i], inorder[i] &lt;= 3000</li><li>  <code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li><li>  Each value of <code>inorder</code> also appears in <code>preorder</code>.</li><li>  <code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li><li>  <code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="keyword">int</span>, inorder []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(preorder) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    idx := firstIndex(inorder,preorder[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val: preorder[<span class="number">0</span>],</span><br><span class="line">        Left: buildTree(preorder[<span class="number">1</span>:idx+<span class="number">1</span>],inorder[:idx]),</span><br><span class="line">        Right: buildTree(preorder[idx+<span class="number">1</span>:],inorder[idx+<span class="number">1</span>:]),</span><br><span class="line">        <span class="comment">//The number of left nodes in preorder equals to inorder</span></span><br><span class="line"><span class="comment">//The number of right nodes in preorder equals to inorder</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstIndex</span><span class="params">(nums []<span class="keyword">int</span>,target <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i,num := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> num == target&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #tree #recursion </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 104. Maximum Depth of Binary Tree</title>
      <link href="/2022/05/14/leetcode-top100-liked-104/"/>
      <url>/2022/05/14/leetcode-top100-liked-104/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.<br>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,null,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li><li>  -100 &lt;= Node.val &lt;= 100</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode,cnt <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode,cnt <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cnt<span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        cnt = max(dfs(root.Left,cnt+<span class="number">1</span>),dfs(root.Right,cnt+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> cnt</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dfs(root,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#easy #tree #dfs </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 102. Binary Tree Level Order Traversal</title>
      <link href="/2022/05/14/leetcode-top100-liked-102/"/>
      <url>/2022/05/14/leetcode-top100-liked-102/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes’ values</em>. (i.e., from left to right, level by level).</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: [[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li><li>  -1000 &lt;= Node.val &lt;= 1000</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    dfs(root,<span class="number">0</span>,&amp;ans)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(node *TreeNode,level <span class="keyword">int</span>,levels *[][]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    curlevel := level+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*levels)&lt;curlevel&#123;</span><br><span class="line">        *levels = <span class="built_in">append</span>(*levels,[]<span class="keyword">int</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    (*levels)[curlevel<span class="number">-1</span>] = <span class="built_in">append</span>((*levels)[curlevel<span class="number">-1</span>],node.Val)</span><br><span class="line">    dfs(node.Left,curlevel,levels)</span><br><span class="line">    dfs(node.Right,curlevel,levels)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #tree #dfs </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 101. Symmetric Tree</title>
      <link href="/2022/05/14/leetcode-top100-liked-101/"/>
      <url>/2022/05/14/leetcode-top100-liked-101/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,2,3,4,4,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,2,null,3,null,3]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li><li>  -100 &lt;= Node.val &lt;= 100</li><li><em>Follow up:</em>* Could you solve it both recursively and iteratively?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isMirror(root,root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMirror</span><span class="params">(root1,root2 *TreeNode)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root1==<span class="literal">nil</span> &amp;&amp; root2==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root1==<span class="literal">nil</span> || root2==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root1.Val==root2.Val &amp;&amp; isMirror(root1.Left,root2.Right) &amp;&amp; isMirror(root1.Right,root2.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #tree #dfs </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 98. Validate Binary Search Tree</title>
      <link href="/2022/05/14/leetcode-top100-liked-98/"/>
      <url>/2022/05/14/leetcode-top100-liked-98/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/binary-search-tree/">Binary Search Tree</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.<br>A <strong>valid BST</strong> is defined as follows:</p><ul><li>  The left subtree of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li><li>  The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li><li>  Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#x27;s value is 5 but its right child&#x27;s value is 4.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li><li>  -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isBST(root,<span class="number">-1</span>&lt;&lt;<span class="number">32</span>,<span class="number">1</span>&lt;&lt;<span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBST</span><span class="params">(node *TreeNode,min,max <span class="keyword">int</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> min&gt;=node.Val || max&lt;=node.Val&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isBST(node.Left,min,node.Val) &amp;&amp; isBST(node.Right,node.Val,max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UintSize = <span class="number">32</span> <span class="comment">// 32 or 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    MaxInt  = <span class="number">1</span>&lt;&lt;(UintSize<span class="number">-1</span>) - <span class="number">1</span> <span class="comment">// 1&lt;&lt;31 - 1 or 1&lt;&lt;63 - 1</span></span><br><span class="line">    MinInt  = -MaxInt - <span class="number">1</span>         <span class="comment">// -1 &lt;&lt; 31 or -1 &lt;&lt; 63</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>#medium #tree #dfs #backtrack </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 96. Unique Binary Search Trees</title>
      <link href="/2022/05/14/leetcode-top100-liked-96/"/>
      <url>/2022/05/14/leetcode-top100-liked-96/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/binary-search-tree/">Binary Search Tree</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given an integer <code>n</code>, return <em>the number of structurally unique **BST’**s (binary search trees) which has exactly</em> <code>n</code> <em>nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= n &lt;= 19</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">p from 1 to n, each node use to root, left tree has p-1 nodes, right tree has n-p nodes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">f(n): numbers of unique BST with n nodes</span></span><br><span class="line"><span class="comment">n f(n)</span></span><br><span class="line"><span class="comment">0:f(0) = 1</span></span><br><span class="line"><span class="comment">1:f(0) * f(0) = 1 (right 0 left 0)</span></span><br><span class="line"><span class="comment">2:f(1) * f(0) + f(0) * f(1) = 1 + 1 = 2 (right 1 left 0，right 0 left 1)</span></span><br><span class="line"><span class="comment">3：f(2) * f(0) + f(1) * f(1) + f(0) * f(2) = 2 + 1 + 2 = 5 (right 2 left 0，right 1 left 1，right 0 left 2)</span></span><br><span class="line"><span class="comment">4：f(3) * f(0) + f(2) * f(1) + f(1) * f(2) + f(0) * f(3) = 5 + 2 + 2 + 5 = 14 (right 3 left 0，right 2 left 1，right 1 left 2，right 0 left 3)</span></span><br><span class="line"><span class="comment">5：f(4) * f(0) + f(3) * f(1) + f(2) * f(2) + f(1) * f(3) + f(0) * f(4) = 14 + 5 + 4 + 5 + 14 = 42 (right 4 left 0，right 3 left 1，right 2 left 2，right 1 left 3，right 0 left 4)</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">n:i from n-1 to 0, j=n-1-i, f(n) init to 0, f(n) += f(i) * f(j) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numTrees</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    p := <span class="built_in">make</span>([]<span class="keyword">int</span>,n+<span class="number">1</span>)</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> dp(n,p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dp</span><span class="params">(n <span class="keyword">int</span>,p []<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> p[n]!=<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p[n]</span><br><span class="line">    &#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--&#123;</span><br><span class="line">        sum += dp(i,p)*dp(n-i<span class="number">-1</span>,p)</span><br><span class="line">    &#125;</span><br><span class="line">    p[n] = sum</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #tree #dp </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 94. Binary Tree Inorder Traversal</title>
      <link href="/2022/05/14/leetcode-top100-liked-94/"/>
      <url>/2022/05/14/leetcode-top100-liked-94/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p><p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes’ values</em>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,null,2,3]</span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the tree is in the range <code>[0, 100]</code>.</li><li>  -100 &lt;= Node.val &lt;= 100</li><li><em>Follow up:</em>* Recursive solution is trivial, could you do it iteratively?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(root *TreeNode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.Left)</span><br><span class="line">        ans = <span class="built_in">append</span>(ans,root.Val)</span><br><span class="line">        dfs(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#easy #tree #dfs</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 85. Maximal Rectangle</title>
      <link href="/2022/05/14/leetcode-top100-liked-85/"/>
      <url>/2022/05/14/leetcode-top100-liked-85/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a>, <a href="https://leetcode.com/tag/monotonic-stack/">Monotonic Stack</a></p><p>Given a <code>rows x cols</code> binary <code>matrix</code> filled with <code>0</code>‘s and <code>1</code>‘s, find the largest rectangle containing only <code>1</code>‘s and return <em>its area</em>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The maximal rectangle is shown in the above picture.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[&quot;0&quot;]]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[&quot;1&quot;]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  rows == matrix.length</li><li>  cols == matrix[i].length</li><li>  1 &lt;= row, cols &lt;= 200</li><li>  matrix[i][j]<code>is</code>‘0’<code>or</code>‘1’`</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximalRectangle</span><span class="params">(matrix [][]<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> maxArea <span class="keyword">int</span></span><br><span class="line">m,n := <span class="built_in">len</span>(matrix),<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">heights := <span class="built_in">make</span>([]<span class="keyword">int</span>,n)</span><br><span class="line"><span class="keyword">for</span> i:= m<span class="number">-1</span>; i &gt;= <span class="number">0</span> ;i-- &#123;</span><br><span class="line"><span class="comment">//for each row</span></span><br><span class="line"><span class="comment">//calculate the current sum of consecutive &#x27;1&#x27; in every col</span></span><br><span class="line"><span class="comment">//the sum = 0 when &#x27;0&#x27;</span></span><br><span class="line"><span class="comment">//eg: matrix := [][]byte&#123;</span></span><br><span class="line"><span class="comment">//&#123;&#x27;1&#x27;,&#x27;0&#x27;,&#x27;1&#x27;,&#x27;0&#x27;,&#x27;0&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&#x27;1&#x27;,&#x27;0&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&#x27;1&#x27;,&#x27;0&#x27;,&#x27;0&#x27;,&#x27;1&#x27;,&#x27;0&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//the 4th row heights = [1,0,0,1,0]</span></span><br><span class="line"><span class="comment">//the 3rd row heights = [2,1,1,2,1]</span></span><br><span class="line"><span class="comment">//the 2nd row heights = [3,0,2,3,2]</span></span><br><span class="line"><span class="comment">//the 1rt row heights = [4,0,3,0,0]</span></span><br><span class="line"><span class="keyword">for</span> j:= n<span class="number">-1</span>; j&gt;=<span class="number">0</span> ; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> matrix[i][j] == <span class="string">&#x27;0&#x27;</span> &#123;</span><br><span class="line">heights[j]  = <span class="number">0</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">heights[j] = <span class="number">1</span> + heights[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//the following part is similar to question 84. Largest Rectangle in Histogram</span></span><br><span class="line">st := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, n+<span class="number">1</span>)</span><br><span class="line">st = <span class="built_in">append</span>(st, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> j:= <span class="number">0</span> ; j &lt; n ; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> st[<span class="built_in">len</span>(st)<span class="number">-1</span>] != <span class="number">-1</span> &amp;&amp; heights[st[<span class="built_in">len</span>(st)<span class="number">-1</span>]] &gt; heights[j]&#123;</span><br><span class="line">height := heights[st[<span class="built_in">len</span>(st)<span class="number">-1</span>]]</span><br><span class="line">st = st[:<span class="built_in">len</span>(st)<span class="number">-1</span>]</span><br><span class="line">width := j - st[<span class="built_in">len</span>(st)<span class="number">-1</span>] <span class="number">-1</span></span><br><span class="line">maxArea = max(maxArea,height * width)</span><br><span class="line">&#125;</span><br><span class="line">st = <span class="built_in">append</span>(st,j)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> st[<span class="built_in">len</span>(st)<span class="number">-1</span>] != <span class="number">-1</span> &#123;</span><br><span class="line">height := heights[st[<span class="built_in">len</span>(st)<span class="number">-1</span>]]</span><br><span class="line">st = st[:<span class="built_in">len</span>(st)<span class="number">-1</span>]</span><br><span class="line">width := <span class="built_in">len</span>(heights) - st[<span class="built_in">len</span>(st)<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">maxArea = max(maxArea, height * width)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxArea</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Change the matrix to histogram first.<br>The thinking is similar to <a href="https://raffizheng.github.io/2022/05/14/leetcode-top100-liked-84/">84. Largest Rectangle in Histogram</a>.  </p><p>#hard #stack #matrix </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 84. Largest Rectangle in Histogram</title>
      <link href="/2022/05/14/leetcode-top100-liked-84/"/>
      <url>/2022/05/14/leetcode-top100-liked-84/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/monotonic-stack/">Monotonic Stack</a></p><p>Given an array of integers <code>heights</code> representing the histogram’s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: heights = [2,1,5,6,2,3]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: The above is a histogram where width of each bar is 1.</span><br><span class="line">The largest rectangle is shown in the red area, which has an area = 10 units.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: heights = [2,4]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= heights.length &lt;= 10<sup>5</sup></li><li>  0 &lt;= heights[i] &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestRectangleArea</span><span class="params">(heights []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> maxArea <span class="keyword">int</span></span><br><span class="line">    stack := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(heights) + <span class="number">1</span>) <span class="comment">//cap=len(heights)+1</span></span><br><span class="line">    stack = <span class="built_in">append</span>(stack, <span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//search the part where heights are in increasing order eg.[2,1,5,6,2,3]</span></span><br><span class="line">    <span class="comment">//part1:[2] (encounter 1, 1&lt;2 pop 1)(area: 2*1)</span></span><br><span class="line">    <span class="comment">//part2:[1,5,6] (encounter 2, 2&lt;6 pop 6, 2&lt;5 pop 5)(area: 6*1 -&gt; 5*2)</span></span><br><span class="line">    <span class="comment">//part3:[2,3] (no encounter, so [1,2,3] left to next round)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> heights &#123;</span><br><span class="line">        <span class="keyword">for</span> stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != <span class="number">-1</span> &amp;&amp; heights[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]] &gt; heights[i] &#123;</span><br><span class="line">            height := heights[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]]</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            width := i - stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">            maxArea = max(maxArea, height * width)</span><br><span class="line">        &#125;</span><br><span class="line">        stack = <span class="built_in">append</span>(stack, i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//the left heights in stcack are in increasing order [1,2,3]</span></span><br><span class="line">    <span class="comment">//area: 3*1 -&gt; 2*4 -&gt; 1*6</span></span><br><span class="line">    <span class="keyword">for</span> stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != <span class="number">-1</span> &#123;</span><br><span class="line">        height := heights[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]]</span><br><span class="line">        stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        width := <span class="built_in">len</span>(heights) - stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">        maxArea = max(maxArea, height * width)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxArea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #stack </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 79. Word Search</title>
      <link href="/2022/05/14/leetcode-top100-liked-79/"/>
      <url>/2022/05/14/leetcode-top100-liked-79/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p><p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.<br>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  m == board.length</li><li>  n = board[i].length</li><li>  1 &lt;= m, n &lt;= 6</li><li>  1 &lt;= word.length &lt;= 15</li><li>  <code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li><li><em>Follow up:</em>* Could you use search pruning to make your solution faster with a larger <code>board</code>?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board [][]<span class="keyword">byte</span>, word <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m,n := <span class="built_in">len</span>(board),<span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(i,j,cnt <span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(i,j,cnt <span class="keyword">int</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> cnt==<span class="built_in">len</span>(word)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">0</span> || i&gt;=m || j&lt;<span class="number">0</span> || j&gt;=n || board[i][j]==<span class="string">&#x27;*&#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> board[i][j]!=word[cnt]&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        cnt++</span><br><span class="line">        temp := board[i][j]</span><br><span class="line">        board[i][j] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        dfsResult := dfs(i<span class="number">-1</span>,j,cnt) || dfs(i+<span class="number">1</span>,j,cnt) || dfs(i,j<span class="number">-1</span>,cnt) || dfs(i,j+<span class="number">1</span>,cnt)</span><br><span class="line">        board[i][j] = temp</span><br><span class="line">        <span class="keyword">return</span> dfsResult</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++&#123;</span><br><span class="line">            <span class="keyword">if</span> board[i][j]==word[<span class="number">0</span>]&#123;</span><br><span class="line">                <span class="keyword">if</span> dfs(i,j,<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #dfs #backtrack </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 78. Subsets</title>
      <link href="/2022/05/14/leetcode-top100-liked-78/"/>
      <url>/2022/05/14/leetcode-top100-liked-78/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a>, <a href="https://leetcode.com/tag/bit-manipulation/">Bit Manipulation</a></p><p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible subsets (the power set)</em>.<br>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line">Output: [[],[0]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 10</li><li>  -10 &lt;= nums[i] &lt;= 10</li><li>  All the numbers of <code>nums</code> are <strong>unique</strong>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">ans := [][]<span class="keyword">int</span>&#123;[]<span class="keyword">int</span>&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _,num := <span class="keyword">range</span> nums&#123;</span><br><span class="line"><span class="keyword">for</span> _,path := <span class="keyword">range</span> ans&#123;</span><br><span class="line">            newPath := <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;&#125;,path...)</span><br><span class="line">newPath = <span class="built_in">append</span>(newPath,num)</span><br><span class="line">ans = <span class="built_in">append</span>(ans,newPath)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">ans := [][]<span class="keyword">int</span>&#123;[]<span class="keyword">int</span>&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _,num := <span class="keyword">range</span> nums&#123;</span><br><span class="line"><span class="keyword">for</span> _,path := <span class="keyword">range</span> ans&#123;</span><br><span class="line">path = <span class="built_in">append</span>(path,num)</span><br><span class="line">ans = <span class="built_in">append</span>(ans,path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will get wrong answer. But I don’t know the reason, you can comment on the page foot if you know.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: [9,0,3,5,7]</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">[[],[9],[0],[9,0],[3],[9,3],[0,3],[9,0,3],[5],[9,5],[0,5],[9,0,5],[3,5],[9,3,5],[0,3,5],[9,0,3,7],[7],[9,7],[0,7],[9,0,7],[3,7],[9,3,7],[0,3,7],[9,0,3,7],[5,7],[9,5,7],[0,5,7],[9,0,5,7],[3,5,7],[9,3,5,7],[0,3,5,7],[9,0,3,7,7]]</span><br><span class="line"></span><br><span class="line">Expected: </span><br><span class="line">[[],[9],[0],[0,9],[3],[3,9],[0,3],[0,3,9],[5],[5,9],[0,5],[0,5,9],[3,5],[3,5,9],[0,3,5],[0,3,5,9],[7],[7,9],[0,7],[0,7,9],[3,7],[3,7,9],[0,3,7],[0,3,7,9],[5,7],[5,7,9],[0,5,7],[0,5,7,9],[3,5,7],[3,5,7,9],[0,3,5,7],[0,3,5,7,9]]</span><br><span class="line"></span><br><span class="line">//the 16th and 32th element is wrong</span><br><span class="line">//[9,0,3,7] - [9,0,3,5]</span><br><span class="line">//[9,0,3,7,7] - [9,0,3,5,7]</span><br></pre></td></tr></table></figure><p>#medium #math </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 76. Minimum Window Substring</title>
      <link href="/2022/05/14/leetcode-top100-liked-76/"/>
      <url>/2022/05/14/leetcode-top100-liked-76/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p><p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window substring</strong> of</em> <code>s</code> <em>such that every character in</em> <code>t</code> <em>(<strong>including duplicates</strong>) is included in the window. If there is no such substring</em><em>, return the empty string</em> <code>&quot;&quot;</code><em>.</em><br>The testcases will be generated such that the answer is <strong>unique</strong>.<br>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br><span class="line">Explanation: The minimum window substring &quot;BANC&quot; includes &#x27;A&#x27;, &#x27;B&#x27;, and &#x27;C&#x27; from string t.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">Output: &quot;a&quot;</span><br><span class="line">Explanation: The entire string s is the minimum window.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: Both &#x27;a&#x27;s from t must be included in the window.</span><br><span class="line">Since the largest window of s only has one &#x27;a&#x27;, return empty string.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  m == s.length</li><li>  n == t.length</li><li>  1 &lt;= m, n &lt;= 10<sup>5</sup></li><li>  <code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li><li><em>Follow up:</em>* Could you find an algorithm that runs in <code>O(m + n)</code> time?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    m,n := <span class="built_in">len</span>(s),<span class="built_in">len</span>(t)</span><br><span class="line">    l,r := <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    window := <span class="keyword">string</span>(<span class="built_in">make</span>([]<span class="keyword">byte</span>,m))</span><br><span class="line">    counter := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> t&#123;</span><br><span class="line">        counter[t[i]]++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//s.length &lt; t.length</span></span><br><span class="line">    <span class="keyword">if</span> m&lt;n&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r&lt;m&#123;<span class="comment">//get the window we need</span></span><br><span class="line">        <span class="comment">//check current character</span></span><br><span class="line">        <span class="keyword">if</span> v,ok:=counter[s[r]]; ok&#123;</span><br><span class="line">            <span class="keyword">if</span> v&gt;<span class="number">0</span>&#123;</span><br><span class="line">                n--</span><br><span class="line">            &#125;</span><br><span class="line">            counter[s[r]]--</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n==<span class="number">0</span>&#123;<span class="comment">//when it is a possible result</span></span><br><span class="line">            <span class="keyword">if</span> _,ok:=counter[s[l]];ok&#123;</span><br><span class="line">                counter[s[l]]++</span><br><span class="line">                <span class="keyword">if</span> counter[s[l]]&gt;<span class="number">0</span>&#123;</span><br><span class="line">                    n++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(window)&gt;=<span class="built_in">len</span>(s[l:r+<span class="number">1</span>])&#123;<span class="comment">//get shorter window</span></span><br><span class="line">                window = s[l:r+<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            l++ <span class="comment">//shrink left border</span></span><br><span class="line">        &#125;</span><br><span class="line">        r++ <span class="comment">//extend right border</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//when there is no result, window doesn&#x27;t get changed</span></span><br><span class="line">    <span class="keyword">if</span> window == <span class="keyword">string</span>(<span class="built_in">make</span>([]<span class="keyword">byte</span>,m)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #string #sliding-window #hash-table </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 75. Sort Colors</title>
      <link href="/2022/05/14/leetcode-top100-liked-75/"/>
      <url>/2022/05/14/leetcode-top100-liked-75/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a></p><p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white, and blue.<br>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.<br>You must solve this problem without using the library’s sort function.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,0,1]</span><br><span class="line">Output: [0,1,2]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  n == nums.length</li><li>  1 &lt;= n &lt;= 300</li><li>  nums[i] is either <code>0</code>, <code>1</code>, or <code>2</code></li><li><em>Follow up:</em>* Could you come up with a one-pass algorithm using only constant extra space?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortColors</span><span class="params">(nums []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    idx_red,idx_blue := <span class="number">0</span>,n<span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;=idx_blue; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]==<span class="number">0</span>&#123;</span><br><span class="line">            nums[i],nums[idx_red] = nums[idx_red],nums[i]</span><br><span class="line">            idx_red++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[i]==<span class="number">2</span>&#123;</span><br><span class="line">            nums[i],nums[idx_blue] = nums[idx_blue],nums[i]</span><br><span class="line">            idx_blue--</span><br><span class="line">            i-- <span class="comment">//in case of an example like [1,2,0]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #sort #two-points </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 74. Search a 2D Matrix</title>
      <link href="/2022/05/14/leetcode-top100-liked-74/"/>
      <url>/2022/05/14/leetcode-top100-liked-74/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p><p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p><ul><li>  Integers in each row are sorted from left to right.</li><li>  The first integer of each row is greater than the last integer of the previous row.</li></ul><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  m == matrix.length</li><li>  n == matrix[i].length</li><li>  1 &lt;= m, n &lt;= 100</li><li>  -10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchMatrix</span><span class="params">(matrix [][]<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m,n := <span class="built_in">len</span>(matrix),<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">var</span> targetRow <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target&lt;matrix[<span class="number">0</span>][<span class="number">0</span>] || target&gt;matrix[m<span class="number">-1</span>][n<span class="number">-1</span>]&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find the row index</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> target&lt;=matrix[i][n<span class="number">-1</span>]&#123;</span><br><span class="line">            targetRow = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//search target in that row</span></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++&#123;</span><br><span class="line">        <span class="keyword">if</span> target==matrix[targetRow][j]&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #matrix </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 73. Set Matrix Zeroes</title>
      <link href="/2022/05/14/leetcode-top100-liked-73/"/>
      <url>/2022/05/14/leetcode-top100-liked-73/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p><p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>‘s.<br>You must do it .</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">Output: [[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  m == matrix.length</li><li>  n == matrix[0].length</li><li>  1 &lt;= m, n &lt;= 200</li><li>  -2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</li></ul><p><strong>Follow up:</strong></p><ul><li>  A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li><li>  A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li><li>  Could you devise a constant space solution?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setZeroes</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    m,n := <span class="built_in">len</span>(matrix),<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">var</span> isZeroFirstRow = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> isZeroFirstCol = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//check top and left edge</span></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++&#123;</span><br><span class="line">        <span class="keyword">if</span> matrix[<span class="number">0</span>][j]==<span class="number">0</span>&#123;</span><br><span class="line">            isZeroFirstRow = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> matrix[i][<span class="number">0</span>]==<span class="number">0</span>&#123;</span><br><span class="line">            isZeroFirstCol = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//check the inner matrix</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;n; j++&#123;</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j]==<span class="number">0</span>&#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//change the inner matrix</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> matrix[i][<span class="number">0</span>]==<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;n; j++&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;n; j++&#123;</span><br><span class="line">        <span class="keyword">if</span> matrix[<span class="number">0</span>][j]==<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//change top and left edge</span></span><br><span class="line">    <span class="keyword">if</span> isZeroFirstRow&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++&#123;</span><br><span class="line">            matrix[<span class="number">0</span>][j]=<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> isZeroFirstCol&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Change inner matrix first, then change top and left edge.</p><p>#medium #math #matrix </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 72. Edit Distance</title>
      <link href="/2022/05/07/leetcode-top100-liked-72/"/>
      <url>/2022/05/07/leetcode-top100-liked-72/</url>
      
        <content type="html"><![CDATA[<h2 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a></p><p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.<br>You have the following three operations permitted on a word:</p><ul><li>  Insert a character</li><li>  Delete a character</li><li>  Replace a character</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">horse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (remove &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (remove &#x27;e&#x27;)</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">intention -&gt; inention (remove &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (insert &#x27;u&#x27;)</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  0 &lt;= word1.length, word2.length &lt;= 500</li><li>  <code>word1</code> and <code>word2</code> consist of lowercase English letters.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDistance</span><span class="params">(word1 <span class="keyword">string</span>, word2 <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l1,l2 := <span class="built_in">len</span>(word1),<span class="built_in">len</span>(word2)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="keyword">int</span>,l1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;l1+<span class="number">1</span>; i++&#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>,l2+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;l1+<span class="number">1</span>; i++&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;l2+<span class="number">1</span>; i++&#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;l1+<span class="number">1</span>; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;l2+<span class="number">1</span>; j++&#123;</span><br><span class="line">            offset := <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]&#123;</span><br><span class="line">                offset = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][j] = mins(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+offset,dp[i<span class="number">-1</span>][j]+<span class="number">1</span>,dp[i][j<span class="number">-1</span>]+<span class="number">1</span>)</span><br><span class="line"><span class="comment">//dp[i-1][j-1] -&gt; dp[i][j]: replace a character</span></span><br><span class="line"><span class="comment">//dp[i-1][j] -&gt; dp[i][j]: delete a character</span></span><br><span class="line"><span class="comment">//dp[i][j-1] -&gt; dp[i][j]: insert a character</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[l1][l2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mins</span><span class="params">(value <span class="keyword">int</span>,values ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;<span class="comment">//get minimum number</span></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> values&#123;</span><br><span class="line">        <span class="keyword">if</span> v&lt;value&#123;</span><br><span class="line">            value = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #dp #string </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 70. Climbing Stairs</title>
      <link href="/2022/05/07/leetcode-top100-liked-70/"/>
      <url>/2022/05/07/leetcode-top100-liked-70/</url>
      
        <content type="html"><![CDATA[<h2 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/memoization/">Memoization</a></p><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.<br>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1\. 1 step + 1 step</span><br><span class="line">2\. 2 steps</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1\. 1 step + 1 step + 1 step</span><br><span class="line">2\. 1 step + 2 steps</span><br><span class="line">3\. 2 steps + 1 step</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= n &lt;= 45</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line">    a,b := <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> temp <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">2</span>; i&lt;=n; i++&#123;</span><br><span class="line">        temp = a+b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#easy #dp </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 64. Minimum Path Sum</title>
      <link href="/2022/05/07/leetcode-top100-liked-64/"/>
      <url>/2022/05/07/leetcode-top100-liked-64/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p><p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.<br><strong>Note:</strong> You can only move either down or right at any point in time.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid = [[1,2,3],[4,5,6]]</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  m == grid.length</li><li>  n == grid[i].length</li><li>  1 &lt;= m, n &lt;= 200</li><li>  0 &lt;= grid[i][j] &lt;= 100</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    m,n := <span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">        grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;n; i++&#123;</span><br><span class="line">        grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;n; j++&#123;</span><br><span class="line">            grid[i][j] += min(grid[i<span class="number">-1</span>][j],grid[i][j<span class="number">-1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grid[m<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&lt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #dp #matrix </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 62. Unique Paths</title>
      <link href="/2022/05/07/leetcode-top100-liked-62/"/>
      <url>/2022/05/07/leetcode-top100-liked-62/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/combinatorics/">Combinatorics</a></p><p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.<br>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.<br>The test cases are generated so that the answer will be less than or equal to 2 * 10<sup>9</sup>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: m = 3, n = 7</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1\. Right -&gt; Down -&gt; Down</span><br><span class="line">2\. Down -&gt; Down -&gt; Right</span><br><span class="line">3\. Down -&gt; Right -&gt; Down</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= m, n &lt;= 100</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">uniquePaths</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    path := <span class="built_in">make</span>([][]<span class="keyword">int</span>,m)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">        path[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>,n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        path[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++&#123;</span><br><span class="line">        path[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;m; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">1</span>; j&lt;n; j++&#123;</span><br><span class="line">            path[i][j] = path[i<span class="number">-1</span>][j]+path[i][j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path[m<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #math #dp </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 56. Merge Intervals</title>
      <link href="/2022/05/07/leetcode-top100-liked-56/"/>
      <url>/2022/05/07/leetcode-top100-liked-56/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a></p><p>Given an array of <code>intervals</code> where intervals[i] = [start<sub style="display: inline;">i</sub>, end<sub style="display: inline;">i</sub>], merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: intervals = [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= intervals.length &lt;= 10<sup>4</sup></li><li>  intervals[i].length == 2</li><li>  0 &lt;= start<sub style="display: inline;">i</sub> &lt;= end<sub style="display: inline;">i</sub> &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(intervals [][]<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ans := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Slice(intervals,<span class="function"><span class="keyword">func</span><span class="params">(i,j <span class="keyword">int</span>)</span><span class="title">bool</span></span>&#123;<span class="keyword">return</span> intervals[i][<span class="number">0</span>]&lt;intervals[j][<span class="number">0</span>]&#125;)</span><br><span class="line">    ans = <span class="built_in">append</span>(ans,intervals[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(intervals); i++&#123;</span><br><span class="line">        <span class="keyword">if</span> intervals[i][<span class="number">0</span>]&lt;=ans[<span class="built_in">len</span>(ans)<span class="number">-1</span>][<span class="number">1</span>]&#123;</span><br><span class="line">            ans[<span class="built_in">len</span>(ans)<span class="number">-1</span>][<span class="number">1</span>] = max(ans[<span class="built_in">len</span>(ans)<span class="number">-1</span>][<span class="number">1</span>],intervals[i][<span class="number">1</span>])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans,intervals[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p><a href="https://pkg.go.dev/sort#Slice">func Slice document here</a></p><p>#medium #sort </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 55. Jump Game</title>
      <link href="/2022/05/06/leetcode-top100-liked-55/"/>
      <url>/2022/05/06/leetcode-top100-liked-55/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a></p><p>You are given an integer array <code>nums</code>. You are initially positioned at the array’s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.<br>Return <code>true</code> <em>if you can reach the last index, or</em> <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 10<sup>4</sup></li><li>  0 &lt;= nums[i] &lt;= 10<sup>5</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    farest,beg,end := <span class="number">0</span>,<span class="number">0</span>,nums[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">next:</span><br><span class="line">    <span class="keyword">for</span> i:=beg; i&lt;=end; i++&#123;</span><br><span class="line">        farest = max(farest,i+nums[i])</span><br><span class="line">        <span class="keyword">if</span> farest&gt;=n<span class="number">-1</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i==end &amp;&amp; end==farest &amp;&amp; nums[end]==<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> i==end&#123;</span><br><span class="line">            beg = end</span><br><span class="line">            end = farest</span><br><span class="line">            <span class="keyword">goto</span> next</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #greedy </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 53. Maximum Subarray</title>
      <link href="/2022/05/06/leetcode-top100-liked-53/"/>
      <url>/2022/05/06/leetcode-top100-liked-53/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/divide-and-conquer/">Divide and Conquer</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a></p><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.<br>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,4,-1,7,8]</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 10<sup>5</sup></li><li>  -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li></ul><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum,max := nums[<span class="number">0</span>],nums[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums[<span class="number">1</span>:]&#123;</span><br><span class="line">        <span class="keyword">if</span> sum&lt;<span class="number">0</span>&#123;</span><br><span class="line">            sum = v</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum += v</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sum&gt;max&#123;</span><br><span class="line">            max = sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 49. Group Anagrams</title>
      <link href="/2022/05/06/leetcode-top100-liked-49/"/>
      <url>/2022/05/06/leetcode-top100-liked-49/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a></p><p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.<br>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</span><br><span class="line">Output: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;&quot;]</span><br><span class="line">Output: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;a&quot;]</span><br><span class="line">Output: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= strs.length &lt;= 10<sup>4</sup></li><li>  0 &lt;= strs[i].length &lt;= 100</li><li>  <code>strs[i]</code> consists of lowercase English letters.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="keyword">string</span>)</span> [][]<span class="title">string</span></span> &#123;</span><br><span class="line">    mp := <span class="keyword">map</span>[[<span class="number">26</span>]<span class="keyword">int</span>][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _,str := <span class="keyword">range</span> strs&#123;</span><br><span class="line">        k := [<span class="number">26</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _,ch := <span class="keyword">range</span> str&#123;</span><br><span class="line">            k[ch-<span class="string">&#x27;a&#x27;</span>]+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        mp[k] = <span class="built_in">append</span>(mp[k],str)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> mp&#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans,v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #hash-table #string </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 48. Rotate Image</title>
      <link href="/2022/05/06/leetcode-top100-liked-48/"/>
      <url>/2022/05/06/leetcode-top100-liked-48/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p><p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).<br>You have to rotate the image , which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span><br><span class="line">Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  n == matrix.length == matrix[i].length</li><li>  1 &lt;= n &lt;= 20</li><li>  -1000 &lt;= matrix[i][j] &lt;= 1000</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(matrix)</span><br><span class="line">    circles := n/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;circles; i++&#123;<span class="comment">//for each circle</span></span><br><span class="line">        beg := i</span><br><span class="line">        end := n-i<span class="number">-1</span></span><br><span class="line">        swap := n<span class="number">-1</span><span class="number">-2</span>*i <span class="comment">//exchange time = end-beg</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;swap; j++&#123;<span class="comment">//for each edge in every circle</span></span><br><span class="line">            topleft := matrix[beg][beg+j]</span><br><span class="line">            <span class="comment">//top &lt;- left</span></span><br><span class="line">            matrix[beg][beg+j] = matrix[end-j][beg]</span><br><span class="line">            <span class="comment">//left &lt;- bottom</span></span><br><span class="line">            matrix[end-j][beg] = matrix[end][end-j]</span><br><span class="line">            <span class="comment">//bottom &lt;- right</span></span><br><span class="line">            matrix[end][end-j] = matrix[beg+j][end]</span><br><span class="line">            <span class="comment">//right &lt;- top</span></span><br><span class="line">            matrix[beg+j][end] = topleft</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #math #matrix</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 46. Permutations</title>
      <link href="/2022/05/06/leetcode-top100-liked-46/"/>
      <url>/2022/05/06/leetcode-top100-liked-46/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a></p><p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1]</span><br><span class="line">Output: [[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 6</li><li>  -10 &lt;= nums[i] &lt;= 10</li><li>  All the integers of <code>nums</code> are <strong>unique</strong>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(cnt <span class="keyword">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(cnt <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> cnt == n&#123;</span><br><span class="line">            temp := <span class="built_in">make</span>([]<span class="keyword">int</span>,n)</span><br><span class="line">            <span class="built_in">copy</span>(temp,nums)</span><br><span class="line">            ans = <span class="built_in">append</span>(ans,temp)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i:=cnt; i&lt;n; i++&#123;</span><br><span class="line">            nums[cnt],nums[i] = nums[i],nums[cnt]</span><br><span class="line">            dfs(cnt+<span class="number">1</span>)</span><br><span class="line">            nums[cnt],nums[i] = nums[i],nums[cnt]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #backtrack #dfs </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 45. Jump Game II</title>
      <link href="/2022/05/04/leetcode-top100-liked-45/"/>
      <url>/2022/05/04/leetcode-top100-liked-45/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a></p><p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Your goal is to reach the last index in the minimum number of jumps.<br>You can assume that you can always reach the last index.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2\. Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,3,0,1,4]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 10<sup>4</sup></li><li>  0 &lt;= nums[i] &lt;= 1000</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans,cur,farest := <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++&#123;</span><br><span class="line">        farest = max(farest,i+nums[i])</span><br><span class="line">        <span class="keyword">if</span> i == cur&#123;</span><br><span class="line">            ans,cur = ans+<span class="number">1</span>,farest</span><br><span class="line">            <span class="keyword">if</span> cur &gt;= n<span class="number">-1</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #greedy</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 42. Trapping Rain Water</title>
      <link href="/2022/05/04/leetcode-top100-liked-42/"/>
      <url>/2022/05/04/leetcode-top100-liked-42/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/monotonic-stack/">Monotonic Stack</a></p><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [4,2,0,3,2,5]</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  n == height.length</li><li>  1 &lt;= n &lt;= 2 * 10<sup>4</sup></li><li>  0 &lt;= height[i] &lt;= 10<sup>5</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(height)</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    l_max := <span class="built_in">make</span>([]<span class="keyword">int</span>,n+<span class="number">2</span>)</span><br><span class="line">    r_max := <span class="built_in">make</span>([]<span class="keyword">int</span>,n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        l_max[i+<span class="number">1</span>] = max(l_max[i],height[i])</span><br><span class="line">        r_max[n-i] = max(r_max[n-i+<span class="number">1</span>],height[n-i<span class="number">-1</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        ans += min(l_max[i+<span class="number">1</span>],r_max[i+<span class="number">1</span>])-height[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&lt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #math </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 41. First Missing Positive</title>
      <link href="/2022/05/04/leetcode-top100-liked-41/"/>
      <url>/2022/05/04/leetcode-top100-liked-41/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a></p><p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.<br>You must implement an algorithm that runs in <code>O(n)</code> time and uses constant extra space.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,0]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,4,-1,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [7,8,9,11,12]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></li><li>  -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]&gt;=<span class="number">1</span> &amp;&amp; nums[i]&lt;=n &amp;&amp; nums[i]!=nums[nums[i]<span class="number">-1</span>]&#123;</span><br><span class="line">            nums[i],nums[nums[i]<span class="number">-1</span>] = nums[nums[i]<span class="number">-1</span>],nums[i]</span><br><span class="line">            i-- <span class="comment">//nums[nums[i]-1] need to be checked as well</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]!=i+<span class="number">1</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #math </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 39. Combination Sum</title>
      <link href="/2022/05/04/leetcode-top100-liked-39/"/>
      <url>/2022/05/04/leetcode-top100-liked-39/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a></p><p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of</em> <code>candidates</code> <em>where the chosen numbers sum to</em> <code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.<br>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the frequency of at least one of the chosen numbers is different.<br>It is <strong>guaranteed</strong> that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,6,7], target = 7</span><br><span class="line">Output: [[2,2,3],[7]]</span><br><span class="line">Explanation:</span><br><span class="line">2 and 3 are candidates, and 2 + 2 + 3 = 7\. Note that 2 can be used multiple times.</span><br><span class="line">7 is a candidate, and 7 = 7.</span><br><span class="line">These are the only two combinations.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,5], target = 8</span><br><span class="line">Output: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2], target = 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= candidates.length &lt;= 30</li><li>  1 &lt;= candidates[i] &lt;= 200</li><li>  All elements of <code>candidates</code> are <strong>distinct</strong>.</li><li>  1 &lt;= target &lt;= 500</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(start <span class="keyword">int</span>, sum <span class="keyword">int</span>, path []<span class="keyword">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(start <span class="keyword">int</span>, sum <span class="keyword">int</span>, path []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> sum&gt;=target&#123;</span><br><span class="line">            <span class="keyword">if</span> sum==target&#123;</span><br><span class="line">                copyPath := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="built_in">len</span>(path))</span><br><span class="line">                <span class="built_in">copy</span>(copyPath,path)</span><br><span class="line">                ans = <span class="built_in">append</span>(ans,copyPath)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i:=start; i&lt;<span class="built_in">len</span>(candidates); i++&#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path,candidates[i])</span><br><span class="line">            dfs(i,sum+candidates[i],path)</span><br><span class="line">            path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>,[]<span class="keyword">int</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Copy <code>path</code> before append it to <code>ans</code></p><p>#medium #dfs #backtrack </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 35. Search Insert Position</title>
      <link href="/2022/05/04/leetcode-top100-liked-35/"/>
      <url>/2022/05/04/leetcode-top100-liked-35/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 10<sup>4</sup></li><li>  -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li><li>  <code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li><li>  -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    l,r,mid := <span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> l&lt;=r&#123;</span><br><span class="line">        mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid]==target&#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[mid]&lt;target&#123;</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[mid]&gt;target&#123;</span><br><span class="line">            r = mid<span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#easy #binary-search </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 34. Find First and Last Position of Element in Sorted Array</title>
      <link href="/2022/05/03/leetcode-top100-liked-34/"/>
      <url>/2022/05/03/leetcode-top100-liked-34/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p><p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.<br>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.<br>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [], target = 0</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  0 &lt;= nums.length &lt;= 10<sup>5</sup></li><li>  -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li><li>  <code>nums</code> is a non-decreasing array.</li><li>  -10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    l,r,mid := <span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//nums[l] is the first num that equals target</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;=r&#123;</span><br><span class="line">        mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid]&gt;=target&#123;</span><br><span class="line">            r=mid<span class="number">-1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> l==n || nums[l]!=target&#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cnt := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]==target&#123;</span><br><span class="line">            cnt++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;l,l+cnt<span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #binary-search </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 33. Search in Rotated Sorted Array</title>
      <link href="/2022/05/03/leetcode-top100-liked-33/"/>
      <url>/2022/05/03/leetcode-top100-liked-33/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p><p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).<br>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.<br>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of</em> <code>target</code> <em>if it is in</em> <code>nums</code><em>, or</em> <code>-1</code> <em>if it is not in</em> <code>nums</code>.<br>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1], target = 0</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 5000</li><li>  -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li><li>  All values of <code>nums</code> are <strong>unique</strong>.</li><li>  <code>nums</code> is an ascending array that is possibly rotated.</li><li>  -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    l,r,mid := <span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//find the pivot</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;r&#123;</span><br><span class="line">        mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; nums[r]&#123;</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pivot := l</span><br><span class="line"></span><br><span class="line">    <span class="comment">//regular binary search</span></span><br><span class="line">    l,r = pivot,pivot+n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;=r&#123;</span><br><span class="line">        mid = l+(r-l)/<span class="number">2</span></span><br><span class="line">        midVal := nums[mid%n]</span><br><span class="line">        <span class="keyword">if</span> midVal&gt;target&#123;</span><br><span class="line">            r = mid<span class="number">-1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> midVal&lt;target&#123;</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid%n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #binary-search</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 32. Longest Valid Parentheses</title>
      <link href="/2022/05/03/leetcode-top100-liked-32/"/>
      <url>/2022/05/03/leetcode-top100-liked-32/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/stack/">Stack</a></p><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;(()&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;)()())&quot;</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()()&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></li><li>  <code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestValidParentheses</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n,ans := <span class="built_in">len</span>(s),<span class="number">0</span></span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>,n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> s[i]==<span class="string">&#x27;)&#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> k:=i-dp[i]<span class="number">-1</span>; k&gt;=<span class="number">0</span> &amp;&amp; s[k]==<span class="string">&#x27;(&#x27;</span>&#123;</span><br><span class="line">                m:=dp[k]+<span class="number">2</span>+dp[i]</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">1</span>&lt;n&#123;</span><br><span class="line">                    dp[i+<span class="number">1</span>]=m</span><br><span class="line">                &#125;</span><br><span class="line">                ans=max(ans,m)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #string #dp </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 31. Next Permutation</title>
      <link href="/2022/05/03/leetcode-top100-liked-31/"/>
      <url>/2022/05/03/leetcode-top100-liked-31/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p><p>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order.</p><ul><li>  For example, for <code>arr = [1,2,3]</code>, the following are considered permutations of <code>arr</code>: <code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[3,1,2]</code>, <code>[2,3,1]</code>.<br>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</li><li>  For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li><li>  Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li><li>  While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.<br>Given an array of integers <code>nums</code>, <em>find the next permutation of</em> <code>nums</code>.<br>The replacement must be and use only constant extra memory.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,1]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,5]</span><br><span class="line">Output: [1,5,1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= nums.length &lt;= 100</li><li>  0 &lt;= nums[i] &lt;= 100</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    i,j,k := n<span class="number">-2</span>,n<span class="number">-1</span>,n<span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//find the consecutively incresing points</span></span><br><span class="line">    <span class="keyword">for</span> i&gt;=<span class="number">0</span> &amp;&amp; nums[i]&gt;=nums[j]&#123;</span><br><span class="line">        i--</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//exchange num[i] nums[k]</span></span><br><span class="line">    <span class="comment">//k is the index of the first num larger than nums[i] from end to j</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;=<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> j&lt;=k &amp;&amp; nums[i]&gt;=nums[k]&#123;</span><br><span class="line">            k--</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i],nums[k] = nums[k],nums[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reverse nums[j:]</span></span><br><span class="line">    <span class="keyword">for</span> i,j = j,n<span class="number">-1</span>; i&lt;j; i,j = i+<span class="number">1</span>,j<span class="number">-1</span>&#123;</span><br><span class="line">        nums[i],nums[j] = nums[j],nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>The order changes from 45° to -45° in graph.<br><img src="Pasted%20image%2020220329151941.png"></p><p>#medium #math #lexicographical-order</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 25. Reverse Nodes in k-Group</title>
      <link href="/2022/05/03/leetcode-top100-liked-25/"/>
      <url>/2022/05/03/leetcode-top100-liked-25/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p><p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.<br><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.<br>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], k = 2</span><br><span class="line">Output: [2,1,4,3,5]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], k = 3</span><br><span class="line">Output: [3,2,1,4,5]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the list is <code>n</code>.</li><li>  1 &lt;= k &lt;= n &lt;= 5000</li><li>  0 &lt;= Node.val &lt;= 1000</li><li><em>Follow-up:</em>* Can you solve the problem in <code>O(1)</code> extra memory space?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    node,cnt := head,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> cnt &lt; k&#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.Next</span><br><span class="line">        cnt++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    prev := reverseKGroup(node,k)</span><br><span class="line">    <span class="comment">//reverse template</span></span><br><span class="line">    <span class="keyword">for</span> cnt &gt; <span class="number">0</span>&#123;</span><br><span class="line">        next := head.Next</span><br><span class="line">        head.Next = prev</span><br><span class="line">        prev = head</span><br><span class="line">        head = next</span><br><span class="line">        cnt--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#hard #linked-list #recursion </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 24. Swap Nodes in Pairs</title>
      <link href="/2022/05/03/leetcode-top100-liked-24/"/>
      <url>/2022/05/03/leetcode-top100-liked-24/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p><p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4]</span><br><span class="line">Output: [2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the list is in the range <code>[0, 100]</code>.</li><li>  0 &lt;= Node.val &lt;= 100</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result := head.Next</span><br><span class="line">    head.Next = swapPairs(head.Next.Next)</span><br><span class="line">    result.Next = head</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #linked-list  #recursion</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 23. Merge k Sorted Lists</title>
      <link href="/2022/05/03/leetcode-top100-liked-23/"/>
      <url>/2022/05/03/leetcode-top100-liked-23/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/divide-and-conquer/">Divide and Conquer</a>, <a href="https://leetcode.com/tag/heap-priority-queue/">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/merge-sort/">Merge Sort</a></p><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.<br><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">Output: [1,1,2,3,4,4,5,6]</span><br><span class="line">Explanation: The linked-lists are:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">merging them into one sorted list:</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: lists = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: lists = [[]]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  k == lists.length</li><li>  0 &lt;= k &lt;= 10<sup>4</sup></li><li>  0 &lt;= lists[i].length &lt;= 500</li><li>  -10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></li><li>  <code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li><li>  The sum of <code>lists[i].length</code> will not exceed 10<sup>4</sup>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(lists)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(lists)&gt;<span class="number">1</span>&#123;</span><br><span class="line">        merged := mergeLists(lists[<span class="number">0</span>],lists[<span class="number">1</span>])</span><br><span class="line">        lists = lists[<span class="number">2</span>:]</span><br><span class="line">        lists = <span class="built_in">append</span>(lists,merged)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> l2 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> l1.Val &lt; l2.Val&#123;</span><br><span class="line">        l1.Next = mergeLists(l1.Next, l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l2.Next = mergeLists(l1, l2.Next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Use the code in <a href="http://raffizheng.github.io/2022/05/03/leetcode-top100-liked-21/">21. Merge Two Sorted Lists</a></p><p>#hard #linked-list #sort</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 22. Generate Parentheses</title>
      <link href="/2022/05/03/leetcode-top100-liked-22/"/>
      <url>/2022/05/03/leetcode-top100-liked-22/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a></p><p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: [&quot;()&quot;]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= n &lt;= 8</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    l,r := n,n</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="keyword">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(l <span class="keyword">int</span>, r <span class="keyword">int</span>, path <span class="keyword">string</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(l <span class="keyword">int</span>, r <span class="keyword">int</span>, path <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="number">2</span>*n&#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans,path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l &gt; <span class="number">0</span>&#123;</span><br><span class="line">            dfs(l<span class="number">-1</span>, r, path+<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l &lt; r&#123;</span><br><span class="line">            dfs(l, r<span class="number">-1</span>, path+<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(l,r,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #backtrack #dfs</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 21. Merge Two Sorted Lists</title>
      <link href="/2022/05/03/leetcode-top100-liked-21/"/>
      <url>/2022/05/03/leetcode-top100-liked-21/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p><p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.<br>Merge the two lists in a one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.<br>Return <em>the head of the merged linked list</em>.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [], list2 = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [], list2 = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in both lists is in the range <code>[0, 50]</code>.</li><li>  -100 &lt;= Node.val &lt;= 100</li><li>  Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> list1 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list2</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> list2 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> list1.Val &lt; list2.Val&#123;</span><br><span class="line">        list1.Next = mergeTwoLists(list1.Next,list2)</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        list2.Next = mergeTwoLists(list1,list2.Next)</span><br><span class="line">        <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #linked-list #recursion </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 20. Valid Parentheses</title>
      <link href="/2022/05/03/leetcode-top100-liked-20/"/>
      <url>/2022/05/03/leetcode-top100-liked-20/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/stack/">Stack</a></p><p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&#123;&#39;</code>, <code>&#39;&#125;&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br>An input string is valid if:</p><ol><li> Open brackets must be closed by the same type of brackets.</li><li> Open brackets must be closed in the correct order.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= s.length &lt;= 10<sup>4</sup></li><li>  <code>s</code> consists of parentheses only <code>&#39;()[]&#123;&#125;&#39;</code>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    pairs := <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">byte</span>&#123;</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stack []<span class="keyword">byte</span></span><br><span class="line">    </span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> != <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> pairs[s[i]] &gt; <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack)==<span class="number">0</span> || stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]!=pairs[s[i]]&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack,s[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack)==<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#string #easy #stack</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 19. Remove Nth Node From End of List</title>
      <link href="/2022/05/01/leetcode-top100-liked-19/"/>
      <url>/2022/05/01/leetcode-top100-liked-19/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p><p>Given the <code>head</code> of a linked list, remove the n<sup>th</sup> node from the end of the list and return its head.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], n = 2</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1], n = 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2], n = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in the list is <code>sz</code>.</li><li>  1 &lt;= sz &lt;= 30</li><li>  0 &lt;= Node.val &lt;= 100</li><li>  1 &lt;= n &lt;= sz</li><li><em>Follow up:</em>* Could you do this in one pass?</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    dummy := &amp;ListNode&#123;Next:head&#125;</span><br><span class="line">    first,second := dummy,dummy</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> first.Next != <span class="literal">nil</span>&#123;</span><br><span class="line">        first = first.Next</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span> count &gt; n&#123;</span><br><span class="line">            second = second.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fisrt point at the end</span></span><br><span class="line">    <span class="comment">//second point at the n-1 node from the end of the list</span></span><br><span class="line">    second.Next = second.Next.Next</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#two-points #linked-list #medium </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 17. Letter Combinations of a Phone Number</title>
      <link href="/2022/04/30/leetcode-top100-liked-17/"/>
      <url>/2022/04/30/leetcode-top100-liked-17/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/backtracking/">Backtracking</a></p><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.<br>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png"></p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: digits = &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: digits = &quot;&quot;</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: digits = &quot;2&quot;</span><br><span class="line">Output: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  <code>0 &lt;= digits.length &lt;= 4</code></li><li>  <code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="keyword">string</span></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">byte</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: []<span class="keyword">string</span>&#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> digits == <span class="string">&quot;&quot;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(<span class="string">&quot;&quot;</span>,&amp;ans,<span class="number">0</span>,digits,m)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backtrack</span><span class="params">(cur <span class="keyword">string</span>,ans *[]<span class="keyword">string</span>,index <span class="keyword">int</span>,digits <span class="keyword">string</span>,keyMap <span class="keyword">map</span>[<span class="keyword">byte</span>][]<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> index == <span class="built_in">len</span>(digits)&#123;</span><br><span class="line">        *ans = <span class="built_in">append</span>(*ans,cur)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,ch := <span class="keyword">range</span> keyMap[digits[index]]&#123;</span><br><span class="line">        backtrack(cur+ch,ans,index+<span class="number">1</span>,digits,keyMap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#medium #backtrack</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 15. 3Sum</title>
      <link href="/2022/04/30/leetcode-top100-liked-15/"/>
      <url>/2022/04/30/leetcode-top100-liked-15/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a></p><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.<br>Notice that the solution set must not contain duplicate triplets.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  <code>0 &lt;= nums.length &lt;= 3000</code></li><li>  <code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans [][]<span class="keyword">int</span></span><br><span class="line">    sort.Ints(nums) <span class="comment">//nums must be sorted</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums)<span class="number">-2</span>; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]&#123;<span class="comment">//To prevent the repeat</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur,l,r := nums[i],i+<span class="number">1</span>,<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> l&lt;r&#123;</span><br><span class="line">            sum := cur+nums[l]+nums[r]</span><br><span class="line">            <span class="keyword">if</span> sum == <span class="number">0</span>&#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans,[]<span class="keyword">int</span>&#123;cur,nums[l],nums[r]&#125;)</span><br><span class="line">                l++</span><br><span class="line">                r--</span><br><span class="line">                <span class="keyword">for</span> l&lt;r &amp;&amp; nums[l]==nums[l<span class="number">-1</span>]&#123;</span><br><span class="line">                    l++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> l&lt;r &amp;&amp; nums[r]==nums[r+<span class="number">1</span>]&#123;</span><br><span class="line">                    r--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> sum &gt; <span class="number">0</span>&#123;</span><br><span class="line">                r--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> sum &lt; <span class="number">0</span>&#123;</span><br><span class="line">                l++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#two-points #medium </p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 11. Container With Most Water</title>
      <link href="/2022/04/29/leetcode-top100-liked-11/"/>
      <url>/2022/04/29/leetcode-top100-liked-11/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a></p><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i&lt;sup&gt;th&lt;/sup&gt;</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.<br>Find two lines that together with the x-axis form a container, such that the container contains the most water.<br>Return <em>the maximum amount of water a container can store</em>.<br><strong>Notice</strong> that you may not slant the container.</p><p><strong>Example 1:</strong><br><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [1,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  n == height.length</li><li>  2 &lt;= n &lt;= 10<sup>5</sup></li><li>  0 &lt;= height[i] &lt;= 10<sup>4</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l,r := <span class="number">0</span>,<span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l&lt;r&#123;</span><br><span class="line">        <span class="keyword">if</span> height[l]&gt;height[r]&#123;</span><br><span class="line">            ans = max(ans,(r-l)*height[r])</span><br><span class="line">            r--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans = max(ans,(r-l)*height[l])</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#two-points #medium</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 10. Regular Expression Matching</title>
      <link href="/2022/04/28/leetcode-top100-liked-10/"/>
      <url>/2022/04/28/leetcode-top100-liked-10/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p><p>Given an input string <code>s</code> and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p><ul><li>  <code>&#39;.&#39;</code> Matches any single character.​​​​</li><li>  <code>&#39;*&#39;</code> Matches zero or more of the preceding element.<br>The matching should cover the <strong>entire</strong> input string (not partial).</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;aa&quot;, p = &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;aa&quot;, p = &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &#x27;*&#x27; means zero or more of the preceding element, &#x27;a&#x27;. Therefore, by repeating &#x27;a&#x27; once, it becomes &quot;aa&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;ab&quot;, p = &quot;.*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= s.length &lt;= 20</li><li>  1 &lt;= p.length &lt;= 30</li><li>  <code>s</code> contains only lowercase English letters.</li><li>  <code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and <code>&#39;*&#39;</code>.</li><li>  It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    slen,plen := <span class="built_in">len</span>(s),<span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">var</span> dp[][]<span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">var</span> t[]<span class="keyword">bool</span></span><br><span class="line">    <span class="comment">//dp[i][j] holds a flag whether s[0:i] matches to p[0:j]</span></span><br><span class="line">    <span class="comment">//s[i-1] and p[j-1] is the current elements</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span> ; i&lt;=slen ; i++&#123;</span><br><span class="line">        t = <span class="built_in">make</span>([]<span class="keyword">bool</span>,plen+<span class="number">1</span>)</span><br><span class="line">        dp = <span class="built_in">append</span>(dp,t)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span> ; i&lt;=slen ; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span> ; j&lt;=plen ; j++&#123;</span><br><span class="line">            <span class="comment">//initialize the left and upper edges</span></span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>&#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> i==<span class="number">0</span>&#123;</span><br><span class="line">                dp[i][j] = (j<span class="number">-1</span>)%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; p[j<span class="number">-1</span>]==<span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[i][j<span class="number">-2</span>]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> j==<span class="number">0</span>&#123;</span><br><span class="line">                dp[i][j] = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//dynamic programming</span></span><br><span class="line">            <span class="keyword">if</span> p[j<span class="number">-1</span>] != <span class="string">&#x27;*&#x27;</span>&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; (s[i<span class="number">-1</span>]==p[j<span class="number">-1</span>] || p[j<span class="number">-1</span>]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> dp[i][j<span class="number">-2</span>] || ((p[j<span class="number">-2</span>]==<span class="string">&#x27;.&#x27;</span> || s[i<span class="number">-1</span>]==p[j<span class="number">-2</span>]) &amp;&amp; dp[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[slen][plen]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>The key is that you should find the all situations where s[0:i] matches p[0:j]</p><p>#dp #hard</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 5. Longest Palindromic Substring</title>
      <link href="/2022/04/27/leetcode-top100-liked-5/"/>
      <url>/2022/04/27/leetcode-top100-liked-5/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a></p><p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Explanation: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  1 &lt;= s.length &lt;= 1000</li><li>  <code>s</code> consist of only digits and English letters.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">var</span> l,r,pl,pr <span class="keyword">int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> l&lt;n &amp;&amp; r&lt;n&#123;</span><br><span class="line">        <span class="comment">//find the mid point</span></span><br><span class="line">        <span class="keyword">for</span> r+<span class="number">1</span>&lt;n &amp;&amp; s[l]==s[r+<span class="number">1</span>]&#123;</span><br><span class="line">            r++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//expand from mid point</span></span><br><span class="line">        <span class="keyword">for</span> l<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; r+<span class="number">1</span>&lt;n &amp;&amp; s[l<span class="number">-1</span>]==s[r+<span class="number">1</span>]&#123;</span><br><span class="line">            l--</span><br><span class="line">            r++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//maximize the length</span></span><br><span class="line">        <span class="keyword">if</span> r-l&gt;pr-pl&#123;</span><br><span class="line">            pl,pr = l,r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//reset to the next mid point</span></span><br><span class="line">        l = (l+r)/<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">        r = l</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s[pl:pr+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Time Complexity: O(n<sup>2</sup>)</p><p>#medium  #string #dp</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 4. Median of Two Sorted Arrays</title>
      <link href="/2022/04/27/leetcode-top100-liked-4/"/>
      <url>/2022/04/27/leetcode-top100-liked-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a>, <a href="https://leetcode.com/tag/divide-and-conquer/">Divide and Conquer</a></p><p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.<br>The overall run time complexity should be <code>O(log (m+n))</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [1,3], nums2 = [2]</span><br><span class="line">Output: 2.00000</span><br><span class="line">Explanation: merged array = [1,2,3] and median is 2.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">Output: 2.50000</span><br><span class="line">Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  nums1.length == m</li><li>  nums2.length == n</li><li>  0 &lt;= m &lt;= 1000</li><li>  0 &lt;= n &lt;= 1000</li><li>  1 &lt;= m + n &lt;= 2000</li><li>  -10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i,j,k,a,b <span class="keyword">int</span></span><br><span class="line">    n1,n2 := <span class="built_in">len</span>(nums1),<span class="built_in">len</span>(nums2)</span><br><span class="line">    center := (n1+n2)/<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i&lt;n1 &amp;&amp; j&lt;n2 &amp;&amp; k&lt;center&#123;</span><br><span class="line">        <span class="keyword">if</span> nums1[i] &lt; nums2[j]&#123;</span><br><span class="line">            b = a</span><br><span class="line">            a = nums1[i]</span><br><span class="line">            i++</span><br><span class="line">            k++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            b = a</span><br><span class="line">            a = nums2[j]</span><br><span class="line">            j++</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i&lt;n1 &amp;&amp; k&lt;center&#123;</span><br><span class="line">        b = a</span><br><span class="line">        a = nums1[i]</span><br><span class="line">        i++</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j&lt;n2 &amp;&amp; k&lt;center&#123;</span><br><span class="line">        b = a</span><br><span class="line">        a = nums2[j]</span><br><span class="line">        j++</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n1+n2)%<span class="number">2</span> == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(a+b) / <span class="keyword">float64</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Note that the last part must be</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(a+b) / <span class="keyword">float64</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>((a+b)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>#hard #divide-and-conquer</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to set win10 terminal proxy</title>
      <link href="/2022/04/26/how-to-set-win10-terminal-proxy/"/>
      <url>/2022/04/26/how-to-set-win10-terminal-proxy/</url>
      
        <content type="html"><![CDATA[<p>I am using Clash for Windows and my proxy adress is <code>127.0.0.1</code> and port is <code>7890</code><br>So I use the following code to complete the proxy setting.</p><ul><li><p>CMD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:7890 &amp; set https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure></li><li><p>Powershell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$Env:http_proxy=&quot;http://127.0.0.1:7890&quot;;$Env:https_proxy=&quot;http://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li><li><p>git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 3. Longest Substring Without Repeating Characters</title>
      <link href="/2022/04/25/leetcode-top100-liked-3/"/>
      <url>/2022/04/25/leetcode-top100-liked-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p><p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;abcabcbb&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3.</span><br><span class="line">Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li><li>  <code>s</code> consists of English letters, digits, symbols and spaces.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">var</span> left,right = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> window = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">bool</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> right &lt; n&#123;</span><br><span class="line">        rightChar := s[right]</span><br><span class="line">        <span class="keyword">for</span> window[rightChar]&#123;</span><br><span class="line">            <span class="built_in">delete</span>(window,s[left])</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right-left+<span class="number">1</span> &gt; maxLen&#123;</span><br><span class="line">            maxLen = right-left+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        window[rightChar] = <span class="literal">true</span></span><br><span class="line">        right++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>when creating a window, the key should be set to <code>byte</code> instead of <code>string</code></p><p>#sliding-window #medium #hash-table #string</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 2. Add Two Numbers</title>
      <link href="/2022/04/25/leetcode-top100-liked-2/"/>
      <url>/2022/04/25/leetcode-top100-liked-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong><br>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">Output: [7,0,8]</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: l1 = [0], l2 = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">Output: [8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  The number of nodes in each linked list is in the range [1, 100]</li><li>  0 &lt;= Node.val &lt;= 9</li><li>  It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> head, tail *ListNode</span><br><span class="line">    <span class="keyword">var</span> sum, carry = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span>&#123;</span><br><span class="line">        v1,v2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span>&#123;</span><br><span class="line">            v1 = l1.Val</span><br><span class="line">            l1 = l1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span>&#123;</span><br><span class="line">            v2 = l2.Val</span><br><span class="line">            l2 = l2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        sum = v1 + v2 + carry</span><br><span class="line">        sum, carry = sum%<span class="number">10</span>, sum/<span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span>&#123;</span><br><span class="line">            head = &amp;ListNode&#123;Val: sum&#125;</span><br><span class="line">            tail = head</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tail.Next = &amp;ListNode&#123;Val: sum&#125;</span><br><span class="line">            tail = tail.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> carry&gt;<span class="number">0</span>&#123;</span><br><span class="line">        tail.Next = &amp;ListNode&#123;Val: carry&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>If there is a carry at the end (carry&gt;0), the carry should also be included</p><p>#medium #linked-list</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 1. Two Sum</title>
      <link href="/2022/04/25/leetcode-top100-liked-1/"/>
      <url>/2022/04/25/leetcode-top100-liked-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong><br>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a></p><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>  2 &lt;= nums.length &lt;= 10<sup>4</sup></li><li>  -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li><li>  -10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></li><li>  <strong>Only one valid answer exists.</strong></li></ul><p>**Follow-up: **Can you come up with an algorithm that is less than O(n<sup>2</sup>) time complexity?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    n:=<span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=i+<span class="number">1</span>;j&lt;n;j++&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i]+nums[j]==target&#123;</span><br><span class="line">                <span class="keyword">return</span> []<span class="keyword">int</span>&#123;i,j&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Improved-Solution"><a href="#Improved-Solution" class="headerlink" title="Improved Solution"></a>Improved Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    dict:=<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i,x :=<span class="keyword">range</span>(nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>  y,ok := dict[target-x];ok&#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="keyword">int</span>&#123;y,i&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dict[x]=i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Solution: O(n<sup>2</sup>)<br>Improved solution: O(n)</p><p>#hash-table #easy</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Leetcode top100 liked questions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro KDE System Installation on ThinkPad E15</title>
      <link href="/2022/04/10/Manjaro-KDE-System-Installation-on-ThinkPad-E15/"/>
      <url>/2022/04/10/Manjaro-KDE-System-Installation-on-ThinkPad-E15/</url>
      
        <content type="html"><![CDATA[<h2 id="Make-startup-disk"><a href="#Make-startup-disk" class="headerlink" title="Make startup disk"></a>Make startup disk</h2><ul><li><a href="https://www.balena.io/etcher/">ISO software</a></li><li><a href="https://manjaro.org/downloads/official/kde/">KDE installation</a><br>Record ISO file to USB flash disk. Note that USB flash disk should be greater than 8g</li></ul><h2 id="BIOS-configuration"><a href="#BIOS-configuration" class="headerlink" title="BIOS configuration"></a>BIOS configuration</h2><ul><li>Disable Secure Boot</li><li>Set boot to UEFI only</li><li>Set the hard disk mode to AHCI (NVME hard disk does not need to be set)</li><li>For ThinkPad notebook, F2 to enter BIOS, F12 to enter the root startup interface</li></ul><h2 id="Partition-512G"><a href="#Partition-512G" class="headerlink" title="Partition(512G)"></a>Partition(512G)</h2><ul><li>Manual partition</li><li>GUID</li><li>EFI：1G fat32 /boot/efi boot</li><li>swap：16G（16384M）linuxswap swap</li><li>root：200G ext4 /</li><li>home：260G ext4 /home </li></ul><h2 id="Software-source-configuration"><a href="#Software-source-configuration" class="headerlink" title="Software source configuration"></a>Software source configuration</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><h2 id="how-to-set-CLASH"><a href="#how-to-set-CLASH" class="headerlink" title="how to set CLASH"></a>how to set CLASH</h2><p><a href="https://zhuanlan.zhihu.com/p/402481568">https://zhuanlan.zhihu.com/p/402481568</a></p><h2 id="Golang-locale-configuration"><a href="#Golang-locale-configuration" class="headerlink" title="Golang locale configuration"></a>Golang locale configuration</h2><p>edit ~/.zshrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># set go environment</span><br><span class="line">export GOROOT=/usr/lib/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">export GOPATH=$HOME/go</span><br><span class="line">export PATH=$PATH:$GOPATH/bin</span><br><span class="line"># set proxy</span><br><span class="line">export GOPROXY=https://goproxy.io,direct</span><br><span class="line">export GOSUMDB=off</span><br><span class="line">export GO111MODULE=auto</span><br></pre></td></tr></table></figure><p>deploy it</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>check the environment</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure><h2 id="deploy-the-“Big-Sur”-theme"><a href="#deploy-the-“Big-Sur”-theme" class="headerlink" title="deploy the “Big Sur” theme"></a>deploy the “Big Sur” theme</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Documents</span><br><span class="line">git clone https://github.com/vinceliuice/WhiteSur-kde</span><br><span class="line">cd WhiteSur-kde</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Process of building a hexo theme blog</title>
      <link href="/2021/08/15/hexo-build/"/>
      <url>/2021/08/15/hexo-build/</url>
      
        <content type="html"><![CDATA[<h2 id="platform-and-tools"><a href="#platform-and-tools" class="headerlink" title="platform and tools"></a>platform and tools</h2><ul><li>Windows10</li><li>git version 2.32.0.windows.2</li><li>node.js version 14.17.5</li><li>npm version 6.14.14</li></ul><h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul><li>install as default</li></ul><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><ol><li>Install according to the default settings, preferably to a non system disk, I install it under disk D</li><li>Create two new folders “node_global”, “Node_cache”under the installation directory </li><li>open CMD, execute the following two instructions respectively, and change the contents according to your own directory</li></ol><ul><li>npm config set prefix “D:\nodejs\node_global”</li><li>npm config set cache “D:\nodejs\node_cache”</li></ul><ol start="4"><li>edit environment variables</li></ol><ul><li>User variable”path” -&gt; edit”npm” to “D:\nodejs\node_global”</li><li>Create a new system variable named “node_path” -&gt; Value “D:\nodejs\node_modules”</li></ul><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ol><li>open CMD</li><li>respectively input “git -v” and “node -v”, observe whether the version number is fed back. If it is fed back, it indicates that it is normal</li></ol><h2 id="install-hexo-blog-framework"><a href="#install-hexo-blog-framework" class="headerlink" title="install hexo blog framework"></a>install hexo blog framework</h2><h3 id="new-folder"><a href="#new-folder" class="headerlink" title="new folder"></a>new folder</h3><ul><li>Create your own folder under the folder where you are going to store your blog. Mine is “D: \ blog”</li></ul><h3 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h3><ul><li><font color=red>Use administrator privileges</font> to open CMD, enter the corresponding blog folder and run the following code<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>Open git bash in the corresponding blog folder and run the following code to download the hexo initialization file<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li>The following error may be reported, that is, the clone is successful, but the NPM plug-in is missing<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">&#x27;npm&#x27; is not recognized as an internal or external command,</span><br><span class="line">operable program or batch file.</span><br><span class="line">WARN  Failed to install dependencies. Please run &#x27;npm install&#x27; in &quot;D:\BLOG&quot; folder.</span><br></pre></td></tr></table></figure></li><li>I directly run “NPM install” on git bash, and the following error is reported, which probably means that I don’t have the install permission at present<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">npm ERR! code EPERM</span><br><span class="line">npm ERR! syscall open</span><br><span class="line">npm ERR! path D:\nodejs\node_cache\_cacache\tmp\930dc59c</span><br><span class="line">npm ERR! errno -4048</span><br><span class="line">npm ERR! Error: EPERM: operation not permitted, open &#x27;D:\nodejs\node_cache\_cacache\tmp\930dc59c&#x27;</span><br><span class="line">npm ERR!  [OperationalError: EPERM: operation not permitted, open &#x27;D:\nodejs\node_cache\_cacache\tmp\930dc59c&#x27;] &#123;</span><br><span class="line">npm ERR!   cause: [Error: EPERM: operation not permitted, open &#x27;D:\nodejs\node_cache\_cacache\tmp\930dc59c&#x27;] &#123;</span><br><span class="line">npm ERR!     errno: -4048,</span><br><span class="line">npm ERR!     code: &#x27;EPERM&#x27;,</span><br><span class="line">npm ERR!     syscall: &#x27;open&#x27;,</span><br><span class="line">npm ERR!     path: &#x27;D:\\nodejs\\node_cache\\_cacache\\tmp\\930dc59c&#x27;</span><br><span class="line">npm ERR!   &#125;,</span><br><span class="line">npm ERR!   isOperational: true,</span><br><span class="line">npm ERR!   errno: -4048,</span><br><span class="line">npm ERR!   code: &#x27;EPERM&#x27;,</span><br><span class="line">npm ERR!   syscall: &#x27;open&#x27;,</span><br><span class="line">npm ERR!   path: &#x27;D:\\nodejs\\node_cache\\_cacache\\tmp\\930dc59c&#x27;</span><br><span class="line">npm ERR! &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! The operation was rejected by your operating system.</span><br><span class="line">npm ERR! It&#x27;s possible that the file was already in use (by a text editor or antivirus),</span><br><span class="line">npm ERR! or that you lack permissions to access it.</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! If you believe this might be a permissions issue, please double-check the</span><br><span class="line">npm ERR! permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the command again as root/Administrator.</span><br></pre></td></tr></table></figure></li><li>Therefore, instead of directly running “NPM install” in Git bash, <font color=red>go back to CMD opened with administrator permission</font>, enter the corresponding blog folder and run the following code<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>Run the following code respectively and open “localhost: 4000” to test whether the hexo website can run locally<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li>So far, the basic deployment of hexo has been completed, and the rest is to search your favorite hexo theme in GitHub and improve your blog</li><li>Here are some possible websites:<br>  <a href="https://hexo.io/docs/">Docs | Hexo</a><br>  <a href="https://github.com/probberechts/hexo-theme-cactus">The theme of this website | Cactus</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>About me</title>
      <link href="/2021/08/15/about-me/"/>
      <url>/2021/08/15/about-me/</url>
      
        <content type="html"><![CDATA[<h1 id="Personal-profile"><a href="#Personal-profile" class="headerlink" title="Personal profile"></a>Personal profile</h1><ul><li>Graduated from Wuhan University of technology, majoring in computer science and technology.</li><li>I love all geek things, and hate people and things that waste time.</li><li>You can contact me through the following way.</li></ul><h1 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h1><ul><li>Wechat: Kenshin1337</li><li>Email: <a href="mailto:&#50;&#x35;&#x30;&#x31;&#x32;&#x30;&#48;&#57;&#x33;&#x34;&#x7a;&#120;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#50;&#x35;&#x30;&#x31;&#x32;&#x30;&#48;&#57;&#x33;&#x34;&#x7a;&#120;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
